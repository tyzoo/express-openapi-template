{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Guestbook": {
				"properties": {
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"address": {
						"type": "string"
					},
					"listName": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": ["address", "listName", "message"],
				"type": "object",
				"additionalProperties": false
			},
			"Item": {
				"properties": {
					"name": {
						"type": "string"
					},
					"rng": {
						"type": "number",
						"format": "double"
					}
				},
				"required": ["name"],
				"type": "object",
				"additionalProperties": false
			},
			"mongoose.Types.ObjectId": {
				"type": "string"
			},
			"Metadata": {
				"properties": {
					"signer": {
						"type": "string"
					},
					"realm": {
						"properties": {
							"lighthouseVersion": {
								"type": "string"
							},
							"layer": {
								"type": "string"
							},
							"catalystName": {
								"type": "string"
							},
							"domain": {
								"type": "string"
							}
						},
						"type": "object"
					},
					"isGuest": {
						"type": "boolean"
					},
					"network": {
						"type": "string"
					},
					"tld": {
						"type": "string"
					},
					"parcel": {
						"type": "string"
					},
					"sceneId": {
						"type": "string"
					},
					"origin": {
						"type": "string"
					}
				},
				"required": ["signer", "realm"],
				"type": "object"
			},
			"MetadataResponse": {
				"properties": {
					"address": {
						"type": "string"
					},
					"metadata": {
						"$ref": "#/components/schemas/Metadata"
					}
				},
				"required": ["address"],
				"type": "object",
				"additionalProperties": false
			},
			"RateLimitResponse": {
				"properties": {
					"ok": {
						"type": "boolean",
						"description": "Status",
						"example": true
					},
					"message": {
						"type": "string",
						"description": "Status message",
						"example": "This request is allowed!"
					},
					"requests": {
						"type": "number",
						"format": "double",
						"description": "Number of requests",
						"example": 1
					},
					"ttl": {
						"type": "number",
						"format": "double",
						"description": "Time To Live, the interval in seconds after which a key-value pair of cache elements will be evicted from the cache.",
						"example": 10
					}
				},
				"required": ["ok", "message", "requests", "ttl"],
				"type": "object",
				"additionalProperties": false
			},
			"User_Scopes": {
				"enum": ["admin", "user", "banned", "verified"],
				"type": "string"
			},
			"UserDoc": {
				"properties": {
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"address": {
						"type": "string"
					},
					"nonce": {
						"type": "string"
					},
					"scopes": {
						"items": {
							"$ref": "#/components/schemas/User_Scopes"
						},
						"type": "array",
						"description": "Privleged access to API's and other account flags",
						"example": ["user", "admin", "verified", "banned"]
					},
					"jwt": {
						"type": "string",
						"description": "Store latest JWT for authorizaiton"
					},
					"_id": {
						"type": "string"
					}
				},
				"required": ["address", "_id"],
				"type": "object",
				"additionalProperties": false
			},
			"ProfileResponse": {
				"properties": {
					"user": {
						"allOf": [
							{
								"$ref": "#/components/schemas/UserDoc"
							}
						],
						"nullable": true
					},
					"jwt": {
						"type": "string"
					}
				},
				"required": ["user"],
				"type": "object",
				"additionalProperties": false
			},
			"APIKey_Scopes": {
				"enum": ["read", "write"],
				"type": "string"
			},
			"APIKeyDoc": {
				"description": "APIKey document with _id field.",
				"properties": {
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"user": {
						"type": "string",
						"description": "APIKeys are linked to users"
					},
					"name": {
						"type": "string",
						"description": "Every APIKey should have a unique name"
					},
					"jwt": {
						"type": "string",
						"description": "Store source JWT for authorizaiton"
					},
					"hash": {
						"type": "string",
						"description": "Store hash of the JWT"
					},
					"expiresAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date the API Key expires"
					},
					"scopes": {
						"items": {
							"$ref": "#/components/schemas/APIKey_Scopes"
						},
						"type": "array",
						"description": "Scopes of the API Key relative to the User account"
					},
					"_id": {
						"type": "string"
					}
				},
				"required": ["user", "name", "expiresAt", "_id"],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"api-key": {
				"type": "apiKey",
				"name": "token",
				"in": "query"
			},
			"siwe": {
				"type": "apiKey",
				"name": "authorization",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "Express OpenAPI Server",
		"description": "An example node app using OpenAPI - Express - Typescript. [Sign In With Ethereum](./../auth)",
		"contact": {
			"name": "@tyzoo",
			"url": "https://github.com/tyzoo",
			"email": "tyler.russell.design@gmail.com"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/guestbook": {
			"get": {
				"operationId": "FindAllitems",
				"responses": {
					"200": {
						"description": "Array of Items",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"allOf": [
											{
												"$ref": "#/components/schemas/Guestbook"
											},
											{
												"properties": {
													"_id": {
														"type": "string"
													}
												},
												"required": ["_id"],
												"type": "object"
											}
										]
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Get all items",
				"summary": "Get all items",
				"tags": ["Guestbook"],
				"security": [],
				"parameters": []
			},
			"post": {
				"operationId": "CreateItem",
				"responses": {
					"200": {
						"description": "New Item",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Guestbook"
										},
										{
											"properties": {
												"_id": {
													"type": "string"
												}
											},
											"required": ["_id"],
											"type": "object"
										}
									]
								}
							}
						}
					}
				},
				"description": "Create an Item",
				"summary": "Create an Item",
				"tags": ["Guestbook"],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Provide new document contents",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"message": {
										"type": "string"
									},
									"address": {
										"type": "string"
									}
								},
								"required": ["message", "address"],
								"type": "object",
								"description": "Provide new document contents"
							}
						}
					}
				}
			}
		},
		"/crud/{itemId}": {
			"get": {
				"operationId": "FindItem",
				"responses": {
					"200": {
						"description": "Item",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Item"
										},
										{
											"properties": {
												"_id": {
													"type": "string"
												}
											},
											"required": ["_id"],
											"type": "object"
										}
									],
									"nullable": true
								},
								"examples": {
									"Successful Response": {
										"value": {
											"_id": "62f05f918c8a2e1d6608dfd2",
											"name": "Item 4",
											"rng": 0.9992763155631645
										}
									}
								}
							}
						}
					}
				},
				"description": "Get Item by ID",
				"summary": "Get Item By ID",
				"tags": ["CRUD"],
				"security": [],
				"parameters": [
					{
						"description": "Document MongoID",
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/mongoose.Types.ObjectId"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateItem",
				"responses": {
					"200": {
						"description": "Updated Item",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Item"
										},
										{
											"properties": {
												"_id": {
													"type": "string"
												}
											},
											"required": ["_id"],
											"type": "object"
										}
									]
								},
								"examples": {
									"Successful Response": {
										"value": {
											"_id": "62f05f918c8a2e1d6608dfd2",
											"name": "Item 4",
											"rng": 0.9992763155631645
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Update an Item",
				"summary": "Update an Item (User Only)",
				"tags": ["CRUD"],
				"security": [
					{
						"jwt": ["user"]
					}
				],
				"parameters": [
					{
						"description": "Document MongoID",
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/mongoose.Types.ObjectId"
						}
					}
				],
				"requestBody": {
					"description": "Content to update to",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string"
									}
								},
								"required": ["name"],
								"type": "object",
								"description": "Content to update to"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteItem",
				"responses": {
					"200": {
						"description": "Deleted Item",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Item"
										},
										{
											"properties": {
												"_id": {
													"type": "string"
												}
											},
											"required": ["_id"],
											"type": "object"
										}
									]
								},
								"examples": {
									"Successful Response": {
										"value": {
											"_id": "62f05f918c8a2e1d6608dfd2",
											"name": "Item 4",
											"rng": 0.9992763155631645
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Delete an Item",
				"summary": "Delete an Item  (Admin Only)",
				"tags": ["CRUD"],
				"security": [
					{
						"jwt": ["admin"]
					}
				],
				"parameters": [
					{
						"description": "Document MongoID",
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"$ref": "#/components/schemas/mongoose.Types.ObjectId"
						}
					}
				]
			}
		},
		"/crud": {
			"post": {
				"operationId": "CreateItem",
				"responses": {
					"200": {
						"description": "New Item",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Item"
										},
										{
											"properties": {
												"_id": {
													"type": "string"
												}
											},
											"required": ["_id"],
											"type": "object"
										}
									]
								},
								"examples": {
									"Successful Response": {
										"value": {
											"_id": "62f05f918c8a2e1d6608dfd2",
											"name": "Item 4",
											"rng": 0.9992763155631645
										}
									}
								}
							}
						}
					}
				},
				"description": "Create an Item",
				"summary": "Create an Item",
				"tags": ["CRUD"],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Provide new document contents",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"name": {
										"type": "string"
									}
								},
								"required": ["name"],
								"type": "object",
								"description": "Provide new document contents"
							}
						}
					}
				}
			}
		},
		"/captcha/new": {
			"get": {
				"operationId": "NewCaptcha",
				"responses": {
					"200": {
						"description": "Captcha Image (PNG Format)",
						"content": {
							"application/json": {
								"schema": {
									"type": "number",
									"enum": [null],
									"nullable": true
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Generate a new Captcha",
				"summary": "Generate a new Captcha",
				"tags": ["Captcha"],
				"security": [],
				"parameters": []
			}
		},
		"/captcha/verify": {
			"post": {
				"operationId": "GetSiweMessage",
				"responses": {
					"200": {
						"description": "Success Boolean",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": ["success"],
									"type": "object"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"success": true
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Verify a Captcha",
				"summary": "Verify a Captcha",
				"tags": ["Captcha"],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"code": {
										"type": "string"
									}
								},
								"required": ["code"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/dcl/optional": {
			"get": {
				"operationId": "Optional",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetadataResponse"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"address": "0x12345...",
											"metadata": {
												"origin": "http://127.0.0.1:8000",
												"sceneId": "b64-L1Vz...",
												"parcel": "0,0",
												"tld": "org",
												"network": "mainnet",
												"isGuest": true,
												"realm": {
													"domain": "http://127.0.0.1:8000",
													"layer": "",
													"catalystName": "http://127.0.0.1:8000"
												},
												"signer": "decentraland-kernel-scene"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										},
										"ok": {
											"type": "boolean"
										}
									},
									"required": ["message", "ok"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"ok": false,
											"message": "Invalid Auth Chain"
										}
									}
								}
							}
						}
					}
				},
				"description": "Optional DCL route",
				"summary": "Optional DCL Route",
				"tags": ["Decentraland"],
				"security": [],
				"parameters": []
			}
		},
		"/dcl/required": {
			"get": {
				"operationId": "Required",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MetadataResponse"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"address": "0x12345...",
											"metadata": {
												"origin": "http://127.0.0.1:8000",
												"sceneId": "b64-L1Vz...",
												"parcel": "0,0",
												"tld": "org",
												"network": "mainnet",
												"isGuest": true,
												"realm": {
													"domain": "http://127.0.0.1:8000",
													"layer": "",
													"catalystName": "http://127.0.0.1:8000"
												},
												"signer": "decentraland-kernel-scene"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										},
										"ok": {
											"type": "boolean"
										}
									},
									"required": ["message", "ok"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"ok": false,
											"message": "Invalid Auth Chain"
										}
									}
								}
							}
						}
					}
				},
				"description": "Required DCL Route",
				"summary": "Required DCL Route",
				"tags": ["Decentraland"],
				"security": [],
				"parameters": []
			}
		},
		"/tests": {
			"get": {
				"operationId": "CheckIfOnline",
				"responses": {
					"200": {
						"description": "If the server is online boolean",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"online": {
											"type": "boolean"
										}
									},
									"required": ["online"],
									"type": "object"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"online": true
										}
									}
								}
							}
						}
					}
				},
				"description": "Check if API is online",
				"summary": "Check if API is online",
				"tags": ["Tests"],
				"security": [],
				"parameters": []
			}
		},
		"/tests/add-items": {
			"get": {
				"operationId": "AddItems",
				"responses": {
					"200": {
						"description": "Status message",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"message": "Added 10 test items to database"
										}
									}
								}
							}
						}
					}
				},
				"description": "Add 10 test items to DB",
				"summary": "Add 10 test items to DB",
				"tags": ["Tests"],
				"security": [],
				"parameters": []
			}
		},
		"/tests/rate-limiter": {
			"get": {
				"operationId": "RateLimiter",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RateLimitResponse"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"ok": true,
											"message": "This request is allowed!",
											"requests": 1,
											"ttl": 10
										}
									}
								}
							}
						}
					},
					"503": {
						"description": "Service Unavailable",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RateLimitResponse"
								},
								"examples": {
									"Example 1": {
										"value": {
											"ok": false,
											"message": "You are being rate limited! Slow down",
											"requests": 2,
											"ttl": 9
										}
									}
								}
							}
						}
					}
				},
				"description": "Test Rate Limitter",
				"summary": "Test Rate Limitter",
				"tags": ["Tests"],
				"security": [],
				"parameters": []
			}
		},
		"/auth/nonce": {
			"post": {
				"operationId": "Nonce",
				"responses": {
					"200": {
						"description": "Nonce for user",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"nonce": {
											"type": "string"
										}
									},
									"required": ["nonce"],
									"type": "object"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"nonce": "MQ4YUxu1R1WUqwerty"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Get a nonce for a user",
				"summary": "Get a new nonce",
				"tags": ["Authentication"],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"address": {
										"type": "string"
									}
								},
								"required": ["address"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/auth/siwe-payload": {
			"post": {
				"operationId": "GetSiweMessage",
				"responses": {
					"200": {
						"description": "Raw SIWE Payload as a string, to be signed",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"message": "express-openapi-ts-app.herokuapp.com wants you to sign in with your Ethereum account:\n0x12345...\n\nSign in with Ethereum to the app.\n\nURI: https://express-openapi-ts-app.herokuapp.com\nVersion: 1\nChain ID: 1\nNonce: MQ4YUxu1R1WUqwerty\nIssued At: 2023-03-15T02:28:43.469Z"
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Get a SIWE Payload for an address/nonce",
				"summary": "Get a SIWE Payload",
				"tags": ["Authentication"],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"nonce": {
										"type": "string"
									},
									"address": {
										"type": "string"
									}
								},
								"required": ["nonce", "address"],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Success boolean",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": ["success"],
									"type": "object"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"success": true
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Login with SIWE",
				"summary": "Login with SIWE",
				"tags": ["Authentication"],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "expiresIn",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "SIWE Object with address, signature, payload",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"siwe": {
										"properties": {
											"payload": {
												"type": "string"
											},
											"signature": {
												"type": "string"
											},
											"address": {
												"type": "string"
											}
										},
										"required": ["payload", "signature", "address"],
										"type": "object"
									}
								},
								"required": ["siwe"],
								"type": "object",
								"description": "SIWE Object with address, signature, payload"
							}
						}
					}
				}
			}
		},
		"/auth/logout": {
			"get": {
				"operationId": "Logout",
				"responses": {
					"200": {
						"description": "Success boolean",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": ["success"],
									"type": "object"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"success": true
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Logout from SIWE",
				"summary": "Logout from SIWE",
				"tags": ["Authentication"],
				"security": [],
				"parameters": []
			}
		},
		"/auth/profile": {
			"get": {
				"operationId": "Profile",
				"responses": {
					"200": {
						"description": "User object and JWT for the logged in user",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ProfileResponse"
								},
								"examples": {
									"Successful Response": {
										"value": {
											"user": {
												"_id": "632a1ed547dcfbc73c912345",
												"address": "0x3C815A79f52A07AD30a8Ad299F68D0C328E12345",
												"nonce": "ItiFRj6T1rQaqwerty",
												"updatedAt": "2023-03-15T01:29:47.938Z"
											},
											"jwt": "eyfrgGciJ..."
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Get SIWE Profile",
				"summary": "Get SIWE Profile",
				"tags": ["Authentication"],
				"security": [],
				"parameters": []
			}
		},
		"/web3/wallet": {
			"get": {
				"operationId": "Wallet",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"privateKey": {
											"type": "string"
										},
										"address": {
											"type": "string"
										}
									},
									"required": ["privateKey", "address"],
									"type": "object"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"tags": ["Web3"],
				"security": [
					{
						"siwe": ["user"]
					}
				],
				"parameters": []
			}
		},
		"/web3/ens/resolve/{name}": {
			"get": {
				"operationId": "EnsResolve",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"address": {
											"type": "string",
											"nullable": true
										}
									},
									"required": ["address"],
									"type": "object"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"tags": ["Web3"],
				"security": [
					{
						"siwe": ["user"]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "name",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/web3/ens/lookup/{address}": {
			"get": {
				"operationId": "En",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"name": {
											"type": "string",
											"nullable": true
										}
									},
									"required": ["name"],
									"type": "object"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"tags": ["Web3"],
				"security": [
					{
						"siwe": ["user"]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api-keys": {
			"get": {
				"operationId": "FindAllitems",
				"responses": {
					"200": {
						"description": "- An array of APIKeys.",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/APIKeyDoc"
									},
									"type": "array"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Retrieves all APIKeys.",
				"summary": "Retrieves all APIKeys.",
				"tags": ["APIKeys"],
				"security": [
					{
						"siwe": ["user"]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateApiKey",
				"responses": {
					"200": {
						"description": "- The new APIKey.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/APIKeyDoc"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"message": {
											"type": "string"
										}
									},
									"required": ["message"],
									"type": "object"
								},
								"examples": {
									"Example 1": {
										"value": {
											"message": "Unauthorized request"
										}
									}
								}
							}
						}
					}
				},
				"description": "Creates a new APIKey.",
				"summary": "Creates a new APIKey.",
				"tags": ["APIKeys"],
				"security": [
					{
						"siwe": ["user"]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "- Request body.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"tokenName": {
										"type": "string"
									},
									"scopes": {
										"items": {
											"$ref": "#/components/schemas/APIKey_Scopes"
										},
										"type": "array"
									},
									"expiresInDays": {
										"type": "number",
										"format": "double"
									}
								},
								"required": ["tokenName", "scopes", "expiresInDays"],
								"type": "object",
								"description": "- Request body."
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	],
	"tags": [
		{
			"name": "Authentication",
			"description": "Authenticate using Sign in With Ethereum (SIWE) [Connect Wallet](./../auth)"
		},
		{
			"name": "APIKeys",
			"description": "Generate API keys for interacting with protected API routes"
		},
		{
			"name": "Captcha",
			"description": "Simple Captcha Verification Example"
		},
		{
			"name": "CRUD",
			"description": "A set of example CRUD routes"
		},
		{
			"name": "Web3",
			"description": "Web3 Related API Routes"
		},
		{
			"name": "Decentraland",
			"description": "Example routes enforcing DCL middleware"
		},
		{
			"name": "Tests",
			"description": "Test if the API is up and running"
		},
		{
			"name": "Guestbook",
			"description": "Guestbook API Routes"
		}
	]
}
